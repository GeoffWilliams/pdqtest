#!/usr/bin/env ruby
require 'rubygems'
ruby_have = Gem::Version.new(RUBY_VERSION)
ruby_need = Gem::Version.new('2.2.0')

if (ruby_have <=> ruby_need) == -1
  raise "Please upgrade Ruby to at least #{ruby_need.version}"
end


require 'pdqtest'
require 'pdqtest/emoji'
require 'pdqtest/instance'
require 'pdqtest/util'
require 'pdqtest/skeleton'
require 'pdqtest/core'
require 'pdqtest/upgrade'
require 'pdqtest/pdk'
require 'escort'
require 'pdqtest/logger'
require 'pdqtest/fastcheck'

# display help if nothing specified
ARGV.push('-h') if ARGV.empty?


Escort::App.create do |app|
  app.version PDQTest::VERSION
  app.summary "pdqtest"
  app.description "test puppet code quickly"

  app.options do |opts|
    opts.opt(:image_name,
      'Specify docker image name(s) to use (docker store name) default is to autodetect',
      :long     => '--image-name',
      :type     => :string,
      :default  => nil,
    )

    opts.opt(:keep_container,
      'Leave container running?',
      :long     => '--keep-container',
      :type     => :boolean,
      :default  => false,
    )

    opts.opt(:disable_emoji,
      'Do not display emoji status characters',
      :long     => '--disable-emoji',
      :type     => :boolean,
      :default  => false,
    )

    opts.opt(:skip_idempotency,
      'Dont check idempotency (run only once)',
      :long     => '--skip-idempotency',
      :type     => :boolean,
      :default  => false,
    )

    opts.opt(:privileged,
      'Run docker containers in privileged mode',
      :long     => '--privileged',
      :type     => :boolean,
      :default  => false,
    )

    opts.opt(:debug,
      'Extra debug messages (also needs --verbosity debug for stack traces)',
      :long     => '--debug',
      :type     => :boolean,
      :default  => false,
    )
  end

  app.command :all do |command|
    command.summary "All"
    command.description "Run all tests"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      PDQTest::Puppet.skip_second_run(options[:global][:options][:skip_idempotency])

      PDQTest::Instance.set_privileged(options[:global][:options][:privileged])
      PDQTest::Instance.set_keep_container(options[:global][:options][:keep_container])
      PDQTest::Instance.set_docker_image(options[:global][:options][:image_name])
      Dir.chdir ".." do
        PDQTest::Core.run([
          lambda {PDQTest::Pdk.run("validate 'metadata,puppet'")},
          lambda {PDQTest::Puppet.install_modules},
          lambda {PDQTest::Pdk.run("test unit")},
          lambda {PDQTest::Instance.run},
          lambda {PDQTest::Pdk.run("build --force")},
        ])
      end
    end
  end

  app.command :fast do |command|
    command.summary "Fast"
    command.description "Run basic lint/syntax and acceptance tests (skips rspec)"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      PDQTest::Puppet.skip_second_run(options[:global][:options][:skip_idempotency])

      PDQTest::Instance.set_privileged(options[:global][:options][:privileged])
      PDQTest::Instance.set_keep_container(options[:global][:options][:keep_container])
      PDQTest::Instance.set_docker_image(options[:global][:options][:image_name])

      Dir.chdir ".." do
        PDQTest::Core.run([
          lambda {PDQTest::Fastcheck.run},
          lambda {PDQTest::Puppet.install_modules},
          lambda {PDQTest::Instance.run},
        ])
      end
    end
  end

  app.command :rspec do |command|
    command.summary "RSpec"
    command.description "Run the RSpec tests (`pdk test unit` with emojis)"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      Dir.chdir ".." do
        PDQTest::Core.run(lambda {PDQTest::Pdk.run("test unit")})
      end
    end
  end


  app.command :acceptance do |command|
    command.summary "Acceptance"
    command.description "Run the acceptance (Docker) tests"
    command.options do |opts|
      opts.opt(:example,
        'Run only this example (eg --example examples/init.pp)',
        :long     => '--example',
        :type     => :string,
        :default  => nil,
      )
    end
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      PDQTest::Puppet.skip_second_run(options[:global][:options][:skip_idempotency])
      PDQTest::Instance.set_privileged(options[:global][:options][:privileged])
      PDQTest::Instance.set_docker_image(options[:global][:options][:image_name])
      PDQTest::Instance.set_keep_container(options[:global][:options][:keep_container])
      example = options[:global][:commands][:acceptance][:options][:example]
      Dir.chdir ".." do
        PDQTest::Core.run(lambda {PDQTest::Instance.run(example)})
      end
    end
  end

  app.command :init do |command|
    command.summary "Initialise testing"
    command.description "Install skeleton testing configuration into this module"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      PDQTest::Skeleton.init
    end
  end

  app.command :generate_acceptance do |command|
    command.summary "Generate Acceptance test"
    command.description "Create a testcase in /examples and the corresponding files for acceptance testing"
    command.options do |opts|
      opts.opt(:example,
        'Generate only this example (eg --example examples/newtest.pp)',
        :long     => '--example',
        :type     => :string,
        :default  => nil,
      )
    end
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      example = options[:global][:commands][:generate_acceptance][:options][:example]

      Dir.chdir ".." do
        PDQTest::Skeleton.generate_acceptance(example)
      end
    end
  end


  app.command :shell do |command|
    command.summary "Shell"
    command.description "Open a shell inside a docker container identical to the test environment before anything has run"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Instance.set_docker_image(options[:global][:options][:image_name])
      PDQTest::Instance.shell
    end
  end

  app.command :syntax do |command|
    command.summary "Syntax"
    command.description "Check for syntax errors (`pdk validate metadata,puppet` with emojis)"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      PDQTest::Emoji.disable(options[:global][:options][:disable_emoji])
      Dir.chdir ".." do
        PDQTest::Core.run(lambda {PDQTest::Pdk.run("validate 'metadata,puppet'")})
      end
    end
  end

  app.command :setup do |command|
    command.summary "Setup"
    command.description "Install the docker container required for testing"

    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      Dir.chdir ".." do
        PDQTest::Core.run(lambda {
          PDQTest::Docker::IMAGES.each { |key, image|
            system("docker pull #{image}")
          }
        })
      end
    end
  end

  app.command :info do |command|
    command.summary "Info"
    command.description "Print info about this module"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      Dir.chdir ".." do
        PDQTest::Puppet.info
      end
    end
  end


  app.command :upgrade do |command|
    command.summary "Upgrade"
    command.description "Upgrade the current module to use this version of PDQTest"
    command.action do |options, arguments|
      PDQTest::Logger.logger
      $logger.level = :debug if options[:global][:options][:debug]

      Dir.chdir ".." do
        PDQTest::Upgrade.upgrade
      end
    end
  end
end
